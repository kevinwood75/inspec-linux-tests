control "splunkforwarder-1.0" do
  impact 1.0
  title 'splunkforwarder'
  desc "Validate splunkforwarder installation"

  params = salt_info
  grains = params.grains

  only_if do
    grains['kernel'] == 'Linux'
  end

  describe package('splunkforwarder') do
    it { should be_installed }
  end

  describe service('splunk') do
    it { should be_enabled }
    it { should be_running }
  end

  # lob_name = property['lob_name']
  # mal_code = property['mal_code']
    
  describe file('/etc/init.d/splunk') do
    it { should exist }
    it { should be_file }
    its('content') { should match /start --accept-license --no-prompt --answer-yes/ }
  end

  describe file('/var/splunked') do
    it { should exist }
    it { should be_directory }
    its('mode') { should cmp '0777' }
    its('owner') { should eq 'splunk' }
    its('group') { should eq 'splunk' }
  end

  describe file('/opt/splunkforwarder/etc/apps/salt/local') do
    it { should exist }
    it { should be_directory }
    its('mode') { should cmp '0755' }
    its('owner') { should eq 'splunk' }
    its('group') { should eq 'splunk' }
  end

  describe file('/opt/splunkforwarder/etc/apps/salt/local/inputs.conf') do
    it { should exist }
    it { should be_file }
    its('mode') { should cmp '0644' }
    its('owner') { should eq 'splunk' }
    its('group') { should eq 'splunk' }
    its('content') { should match /# FILE MANAGED BY SALT/ }
    its('content') { should match(%r{\[monitor:///var/splunked/\*/\*\.log\]\nindex = main\nrecursive = true\nsourcetype = app:#{grains['mal_code']}}) }
    its('content') { should match(%r{\[monitor:///var/lib/splunkforwarder/os_properties\.ini\]\nindex = main\nsourcetype = salt:os_properties}) }
    its('content') { should match(%r{\[monitor:///tmp/post-install-script\.log\]\nindex = cloudify\nsourcetype = post_install:linux}) }
    its('content') { should match(%r{\[monitor:///var/tmp/post-install-script\.log\]\nindex = cloudify\nsourcetype = post_install:linux}) }
  end

  describe file('/opt/splunkforwarder/etc/apps/salt/local/props.conf') do
    it { should exist }
    it { should be_file }
    its('mode') { should cmp '0644' }
    its('owner') { should eq 'splunk' }
    its('group') { should eq 'splunk' }
    its('content') { should match /### THIS FILE IS AUTOMATICALLY GENERATED by salt/ }
  end

  if grains['splunk_cluster'] == 'nonsox_legacy'
    describe file('/opt/splunkforwarder/etc/apps/nonsox_legacy_cluster_forwarder_outputs/local/outputs.conf') do
      it { should exist }
      it { should be_file }
      # Based on how the state is coded this is what would be expected, but in reality the file ends up owned by root and with a different mode
      # It appears some other process updates the file afterwards but it is not quite clear what process that is
      #it { should be_mode 644 }
      #it { should be_owned_by 'splunk' }
      #it { should be_grouped_into 'splunk' }
      its('content') { should match /server = splunk01\.mgmt1\.cloud\.td\.com:9998,splunk02\.mgmt1\.cloud\.td\.com:9998/ }
      its('content') { should match /sslCertPath = \$SPLUNK_HOME\/etc\/auth\/server\.pem/ }
      its('content') { should match /sslRootCAPath = \$SPLUNK_HOME\/etc\/auth\/cacert\.pem/ }
      its('content') { should match /sslVerifyServerCert = false/ }
    end
  else
    describe file("/opt/splunkforwarder/etc/apps/#{grains['splunk_cluster']}_cluster_forwarder_outputs/local/outputs.conf") do
      it { should exist }
      it { should be_file }
      # Based on how the state is coded this is what would be expected, but in reality the file ends up owned by root and with a different mode
      # It appears some other process updates the file afterwards but it is not quite clear what process that is
      #it { should be_mode 644 }
      #it { should be_owned_by 'splunk' }
      #it { should be_grouped_into 'splunk' }
      its('content') { should match /server = splunk-idx-lob\.mgmt4\.cloud\.td\.com:9997/ }
      its('content') { should match /sslCertPath = \$SPLUNK_HOME\/etc\/apps\/#{grains['splunk_cluster']}_cluster_forwarder_outputs\/certs\/td_csl_forwarder_certificate\.pem/ }
      its('content') { should match /sslRootCAPath = \$SPLUNK_HOME\/etc\/apps\/#{grains['splunk_cluster']}_cluster_forwarder_outputs\/certs\/td_csl_splunk_cacert\.pem/ }
      its('content') { should match /sslVerifyServerCert = false/ }
      its('content') { should match /useClientSSLCompression = true/ }
    end
  end

  describe file('/opt/splunkforwarder/etc/system/local/inputs.conf') do
    it { should exist }
    it { should be_file }
    its('mode') { should cmp '0644' }
    its('owner') { should eq 'splunk' }
    its('group') { should eq 'splunk' }
      FQDN = grains['fqdn']
      unless FQDN.empty?
        FQDN.each_line do |thefqdn|
          its('content') { should match thefqdn }
        end
      end
  end

  describe command('/bin/splunk list user -auth admin:changeme --accept-license --no-prompt --answer-yes') do
    its('exit_status') { should_not eq 0 }
  end

  describe file('/var/lib/splunkforwarder') do
    it { should exist }
    it { should be_directory }
    its('mode') { should cmp '0755' }
  end

  describe file('/var/lib/splunkforwarder/os_properties.ini') do
    it { should exist }
    it { should be_file }
    its('content') { should match /OsType = Linux/ }
    its('mode') { should cmp '0644' }
  end

  describe file('/opt/splunkforwarder/etc/auth/server.pem') do
    it { should exist }
    it { should be_file }
    its('md5sum') { should eq '4fddadd1b9a1b2ab8ea2f8853159782b' }
  end

  describe file('/opt/splunkforwarder/etc/auth/cacert.pem') do
    it { should exist }
    it { should be_file }
    its('md5sum') { should eq '34cc818354e982f439ce83f6a9a9961e' }
  end

  # Sensu checks (based on pillar data)
  describe json('/etc/sensu/conf.d/checks.json') do
    its(['checks','base_linux_process_splunkforwarder', 'command']) { should eq "/opt/sensu/embedded/bin/check-process.rb -p splunkd -C 1" }
  end
   
  # Splunk forwarder checks (based on pillar data)
  describe file ('/opt/splunkforwarder/etc/apps/salt/local/inputs.conf') do
  	it { should exist }
  	it { should be_file }
  end

  describe command('netstat -peant | grep "9998\|9997\|8843\|8089\|1514"') do
    its('exit_status') { should eq 0 }
    its('stdout') { should match /splunkd/ }
  end
end
